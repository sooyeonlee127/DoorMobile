{"version":3,"file":"static/js/914.5c92be45.chunk.js","mappings":"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","sources":["components/contact/ContactInfo/ContactInfo.style.tsx","components/common/RoundedButton/RoundedButton.style.tsx","components/common/RoundedButton/RoundedButton.tsx","components/contact/ContactInfo/ContactInfo.tsx","components/contact/index.style.tsx","components/contact/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport theme from '@/styles/theme';\nimport { MdTextResponsive } from '@/styles';\nimport { css } from '@emotion/react';\n\nexport const ContactContainer = styled.div`\n  padding: 25px 0px;\n`;\n\nexport const ContactBox = styled.div`\n  padding: 5px 0px;\n`;\n\nexport const Name = styled.span`\n  font-size: ${theme.fontSizes.md};\n  ${MdTextResponsive}\n`;\n\nexport const Relation = styled.span`\n  padding: 0px 9px;\n  letter-spacing: 1px;\n`;\nconst maxWidth = 460\nconst widthSize = 230\n\nexport const BtnStyle = css({\n  width: '230px',\n  color: theme.colors.pointFont,\n  '&:hover': {\n    backgroundColor: theme.colors.pointFont,\n    color: 'white',\n  },\n    '@media (max-width: 420px)': {\n      width: `${(widthSize * 420) / maxWidth}px`,\n    },\n    '@media (max-width: 410px)': {\n      width: `${(widthSize * 410) / maxWidth}px`,\n    },\n    '@media (max-width: 400px)': {\n      width: `${(widthSize * 400) / maxWidth}px`,\n    },\n    '@media (max-width: 390px)': {\n      width: `${(widthSize * 390) / maxWidth}px`,\n    },\n    '@media (max-width: 380px)': {\n      width: `${(widthSize * 380) / maxWidth}px`,\n    },\n    '@media (max-width: 370px)': {\n      width: `${(widthSize * 370) / maxWidth}px`,\n    },\n    '@media (max-width: 360px)': {\n      width: `${(widthSize * 360) / maxWidth}px`,\n    },\n    '@media (max-width: 350px)': {\n      width: `${(widthSize * 350) / maxWidth}px`,\n    },\n    '@media (max-width: 340px)': {\n      width: `${(widthSize * 340) / maxWidth}px`,\n    },\n    '@media (max-width: 330px)': {\n      width: `${(widthSize * 330) / maxWidth}px`,\n    },\n    '@media (max-width: 310px)': {\n      width: `${(widthSize * 310) / maxWidth}px`,\n    },\n    '@media (max-width: 300px)': {\n      width: `${(widthSize * 300) / maxWidth}px`,\n    },\n});\n","import { css, SerializedStyles } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport theme from '@/styles/theme';\nimport { ButtonHTMLAttributes } from 'react';\n\ninterface RoundedFillButtonProps\n  extends ButtonHTMLAttributes<HTMLButtonElement> {\n  css?: SerializedStyles;\n}\nexport const RoundedStrokeButtonBox = styled.button`\n  width: 220px;\n  border: 1px ${theme.colors.pointFont};\n  border-style: solid;\n  color: ${theme.colors.pointFont};\n`;\n\nexport const RoundedButtonBox = styled.button<RoundedFillButtonProps>`\n  ${(props) => props.css}\n  padding: 7px;\n  border-radius: 30px;\n  margin: 10px 20px;\n  border: 1px;\n  border-style: solid;\n`;\n","import { RoundedButtonBox } from './RoundedButton.style';\nimport { SerializedStyles } from '@emotion/react';\n\ninterface RoundedButtonProps {\n  btnText: string;\n  btnStyle: SerializedStyles;\n  clickEvent: React.MouseEventHandler<HTMLButtonElement>\n}\n\nconst RoundedButton = ({ btnText, btnStyle, clickEvent }: RoundedButtonProps) => {\n  return <RoundedButtonBox css={btnStyle} onClick={clickEvent}>{btnText}</RoundedButtonBox>;\n};\nexport default RoundedButton;\n","import {\n  ContactContainer,\n  ContactBox,\n  Name,\n  Relation,\n  BtnStyle,\n} from './ContactInfo.style';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../../store/index';\nimport RoundedButton from '@/components/common/RoundedButton/RoundedButton';\nimport { useEffect } from 'react';\nimport { getContactList } from '@/store/contact/thunkFunctions';\nimport { changeContactPopup } from '@/store/popup/popupSlice';\n\nconst ContactInfo = () => {\n  const dispatch = useDispatch();\n  const { groom, bride } = useSelector(\n    (state: RootState) => state.wedding.weddingInfo || {}\n  );\n  const temp = () => {\n    dispatch(changeContactPopup(true));\n  };\n\n  return (\n    <ContactContainer>\n      <ContactBox>\n        <Name>{groom.parents.father}</Name>\n        <Relation>의 {groom.groomRoleTypeName}</Relation>\n        <Name>{groom.name}</Name>\n      </ContactBox>\n      <ContactBox>\n        <Name>{bride.parents.father}</Name>\n        <Relation>의 {bride.brideRoleTypeName}</Relation>\n        <Name>{bride.name}</Name>\n      </ContactBox>\n      <RoundedButton btnText=\"연락하기\" btnStyle={BtnStyle} clickEvent={temp} />\n    </ContactContainer>\n  );\n};\nexport default ContactInfo;\n","import styled from '@emotion/styled';\nimport { fadeInStyle } from '@/styles';\n\nexport const ComponentContainer = styled.div`\n  ${fadeInStyle}\n`;\n\nexport const CheckEndBox = styled.div`\n  width: 100px;\n  height: 50px;\n  // background-color: red;\n`;\n","import React, { useEffect, useRef, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loadDate } from '../../store/load/loadSlice'\r\nimport ContactInfo from \"./ContactInfo/ContactInfo\";\r\nimport { ComponentContainer, CheckEndBox } from './index.style';\r\n\r\n\r\nconst Contact = () => {\r\n    const checkRef = useRef(null)\r\n    const dispatch = useDispatch();\r\n    const isDateLoad = useSelector((state: any) => state?.load?.isDateLoad);\r\n\r\n    const loaderMore = useCallback(() => {\r\n        if (!isDateLoad) {\r\n            dispatch(loadDate(true))\r\n        }\r\n    }, [isDateLoad])\r\n\r\n    useEffect(() => {\r\n        if (!checkRef.current) return\r\n        const observer = new IntersectionObserver(([entry]) => {\r\n            if (entry.isIntersecting) {\r\n                setTimeout(() => {\r\n                    loaderMore();\r\n                }, 1000)\r\n            }\r\n        });\r\n        observer.observe(checkRef.current)\r\n        return () => observer.disconnect()\r\n    }, [])\r\n    return (\r\n        <ComponentContainer>\r\n            <ContactInfo/>\r\n            <CheckEndBox ref={checkRef}></CheckEndBox>\r\n        </ComponentContainer>\r\n    )\r\n}\r\nexport default Contact;"],"names":["ContactContainer","styled","div","_templateObject","_taggedTemplateLiteral","ContactBox","_templateObject2","Name","span","_templateObject3","theme","fontSizes","md","MdTextResponsive","Relation","_templateObject4","BtnStyle","css","width","color","colors","pointFont","backgroundColor","concat","widthSize","button","RoundedButtonBox","props","_ref","btnText","btnStyle","clickEvent","_jsx","onClick","children","ContactInfo","dispatch","useDispatch","groom","bride","useSelector","state","wedding","weddingInfo","_jsxs","parents","father","groomRoleTypeName","name","brideRoleTypeName","RoundedButton","temp","changeContactPopup","ComponentContainer","fadeInStyle","CheckEndBox","Contact","checkRef","useRef","isDateLoad","_state$load","load","loaderMore","useCallback","loadDate","useEffect","current","observer","IntersectionObserver","entry","isIntersecting","setTimeout","observe","disconnect","ref"],"sourceRoot":""}